#include<iostream>


using namespace std;

bool findNum(int[][10],int , int , int ,int ,int );
int rowWithLeftest1(int [][10], int, int);
void sortByColumn(int [][10], int, int, int);

int main()
{
    int n,m,key,choice;
    bool b;
    
	int arr[10][10];
	
	do
	{
		cout << endl << "Enter 1: Enter matrix";
        cout << endl << "Enter 2: Search an element's presence in the array ";
		cout << endl << "Enter 3: Find row having the leftest 1 in a row sorted boolean matrix";
		cout << endl << "Enter 4: Spiral print of matrix";
		cout << endl << "Enter 5: Sort a matrix with respect to a given column";
		cout << endl << "Enter 6: Display the matrix";
		
		cout << endl << "Enter 12: Exit";
		cout << endl << "Enter your choice ";
		
        cin>>choice;
        switch(choice)
        {
           	case 1:		cout<<"Enter no. of rows\n";
					    cin>>n;
					    cout<<"Enter no. of columns\n";
					    cin>>m;
			   
			   			cout<<"Enter matrix from left to right "<<" \n";
					    for(int i=0; i<n; i++)
						{
							for(int j=0; j<m; j++)
								{
									cin>>arr[i][j];
								}
						}
						break;
			case 2:		cout<<"\n Enter the key to search\n";
						cin>>key;
						b = findNum(arr, 0, n-1, 0, m-1, key);
						if(b)
							cout<<"found";
						else
							cout<<"not found";
						break;
			case 3:		key = rowWithLeftest1(arr, n, m);
						if(key == -1)
							cout<<"\n No Row with a 1";
						else
							{
								cout<<"\n The row no. having leftest 1 is : ";
								cout<<key<<endl;
							}
						break;			
			case 4:		cout<<"The spiral print of matrix is "<<" \n";
					    for(int i=0; i<n; i++)
						{
							cout<<"\n";
							for(int j=(i%2)*(m-1); j>=0 && j<m ; )
								{
									cout<<arr[i][j];
									if(i%2==0)
										j++;
									else 
										j--;										
								}
						}	
						break;
			case 5:		cout<<"\n Enter the column no. from 1 to "<<m<<" to sort\n";
						cin>>key;
						sortByColumn(arr, n, m, key);
						break;
			case 6:		cout<<"the matrix is : "<<" \n";
					    for(int i=0; i<n; i++)
						{
							for(int j=0; j<m; j++)
								{
									cout<<arr[i][j]<<" ";
								}
								cout<<"\n";
						}
						break;
			case 12:	cout<<"END";
						break;
		}
					
	}while(choice!=12);
	
	
	//system("pause");
  return 0;
}

	bool findNum(int arr[][10],int xmin, int xmax, int ymin,int ymax,int key)
	{
	    if (xmin > xmax || ymin > ymax || xmax < xmin || ymax < ymin) return false;
	    if ((xmin == xmax) && (ymin == ymax) && (arr[xmin][ymin] != key)) return false;
	    if (arr[xmin][ymin] > key || arr[xmax][ymax] < key) return false;
	    if (arr[xmin][ymin] == key || arr[xmax][ymax] == key) return true;
	
	    int xnew = (xmin + xmax)/2;
	    int ynew = (ymin + ymax)/2;
	
	    if (arr[xnew][ynew] == key) return true;
	    if (arr[xnew][ynew] < key)
	    {
	        if (findNum(arr,xnew+1,xmax,ymin,ymax,key))
	            return true;
	        return (findNum(arr,xmin,xmax,ynew+1,ymax,key));
	    } else {
	        if (findNum(arr,xmin,xnew-1,ymin,ymax,key))
	            return true;
	        return (findNum(arr,xmin,xmax,ymin,ynew-1,key));
	    }
	}
	
	int binSearch1(int arr[], int min, int max)
	{
		if(min>max || arr[max] == 0)	return -1;
		if(min==max && arr[min]==0) return -1;
		if(min==max && arr[min]==1) return min;
		
		int i = (max + min)/2;
		if(arr[i] == 0)
			if(arr[i+1]== 1)
				return i+1;
			else 
				return(binSearch1(arr, i+1, max));
				
		else if(arr[i] == 1)
			if((i-1 >= min && arr[i-1]== 0) || (i==min))
				return i;
			else if(i-1 >= min)
				return(binSearch1(arr, min, i-1));				
		return -1;			
	}
	
	int rowWithLeftest1(int arr[][10], int n, int m)
	{
		int columnId = -1, rowId;
		int k;
		columnId = binSearch1(arr[0], 0, m-1);
		for(int i = 1; i < n; i++)
		{
			if(columnId == -1)
				{
					columnId = binSearch1(arr[i], 0, m-1);
					rowId = i;
				}
			else if(columnId != -1 && arr[i][columnId]==1)
				{
					k = binSearch1(arr[i], 0, columnId -1);
					if(columnId > k)
						{
							columnId = k;		
							rowId = i;
						}
				}
		}
		return rowId;
	}

void sortByColumn(int arr[][10], int n, int m, int column)
{
	for(int i = 0; i<n; i++)
	{
		for(int j = 0; j<i; j++)
		{
			if(arr[i][column-1] < arr[j][column-1])
			{
				std::swap(arr[i], arr[j]);
			}	
		}
	}					
}
