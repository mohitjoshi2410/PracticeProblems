#include<iostream>
#include<Stack>
#include<cmath>
#include<map>
#include<vector>
#include<cstdlib>
#include<cmath>
using namespace std;

void PGT(int [], int);
void sort(int [], int);
int median(int [], int[], int);
int kadane(int [], int);
int cirKadane(int [], int);
int* productForEveryElement(int [], int);
void merge(int [], int[], int, int);
int findMaxDivisibleNo(int [], int, int);
void find2ClosestNos(int [], int, int);
void reduce1eleAtEachStep(int [], int, int);
void moveFirstXelementsToLast(int [], int, int);
int equiPoint(int[], int);
void allSetsPossible(int [], int);
void allSetsPossibleWithSumK(int [], int, int);
int longestContiIncSubarray(int [], int, int *);
vector<bool> findBSTencoding(int [], int, int);
int firstOccurrenceOf1InfiniteBool(int [], int);

int main()
{
  	int n,n2,m,key,choice;
    bool b;
    int arr[10];
	int arr2[10];
	int* arr3[10];
	int arr4[10];
	int max = 1;
	vector<bool> vs;
	
	do
	{
		cout << endl << "Enter 1: Enter array";
        cout << endl << "Enter 2: Display the array ";
        cout << endl << "Enter 3: Sort the array";
		cout << endl << "Enter 4: Find PGTs";
		cout << endl << "Enter 5: Find median of 2 sorted arrays";
		cout << endl << "Enter 6: Find max continuous sum in an array";
		cout << endl << "Enter 7: Find max continuous sum in a circular array";
		cout << endl << "Enter 8: For every element find product of all others except the element itself";
		cout << endl << "Enter 9: Merge 2nd sorted array into 1st sorted, if it could be done";
		cout << endl << "Enter 10: Find max no. made from array which is divisible by a given no.";
		cout << endl << "Enter 11: Find sum of 2 nos. closest to the given sum ";
		cout << endl << "Enter 12: Given N iterations, at each step replace element by its next-itself ";
		cout << endl << "Enter 13: Move N elements to the last";
		cout << endl << "Enter 14: EquiPoint in an array";
		cout << endl << "Enter 15: All pairs in an array";
		cout << endl << "Enter 16: All sets which add upto K in an array";
		cout << endl << "Enter 17: Length of the longest continuous increasing subarray";
		cout << endl << "Enter 18: BST path encoding in booleans";
		cout << endl << "Enter 19: First occurence of 1 in a sorted boolean array";
		
		cout << endl << endl << "Enter 30: Exit";
		cout << endl << "Enter your choice\n ";
		
        cin>>choice;
        switch(choice)
        {
           	case 1:		cout<<"Enter no. of elements\n";
					    cin>>n;
			   
			   			cout<<"Enter elements "<<" \n";
					    for(int i=0; i<n; i++)
						{
							cin>>arr[i];
						}
						break;
			case 2:		cout<<"\n Enter array is :\n";
						for(int i=0; i<n; i++)
						{
							cout<<arr[i]<<" ";
						}
						break;
			case 3:		sort(arr, n);
						break;
			case 4:		PGT(arr, n);
						break;
			case 5:		cout<<"Enter "<<n<<" elements for 2nd array"<<" \n";
					    for(int i=0; i<n; i++)
						{
							cin>>arr2[i];
						}
						key = median(arr, arr2, n);
						cout<<"The median is : "<<key<<endl;
						break;
			case 6:		key = kadane(arr, n);
						cout<<"The max continues sum is : "<<key<<endl;
						break;
			case 7:		key = cirKadane(arr, n);
						cout<<"The max continues sum is : "<<key<<endl;
						break;
			case 8:		*arr3 = productForEveryElement(arr, n);
						cout<<"The modified array is : "<<endl;
						for(int i=0; i<=(n-1)*4; i=i+4)
						{
							cout<<*(productForEveryElement(arr, n)+ i)<<" ";
						}
						break;
			case 9:		cout<<"Enter no. of elements for 2nd array"<<" \n";
					    cin>>n2;
					    cout<<"Enter elements for 2nd array"<<" \n";
						for(int i=0; i<n2; i++)
						{
							cin>>arr4[i];
						}
						merge(arr, arr4, n, n2);
						break;
			case 10:	cout<<"Enter no. for which max divisible no. is to be found from the array"<<" \n";
					    cin>>n2;
					    key = findMaxDivisibleNo(arr, n, n2);
						cout<<"The max divisible no. is "<<key<<" \n";
						break;			
			case 11:	cout<<"Enter the no. for which sum of 2 nos. closest to it"<<" \n";
					    cin>>n2;
					    find2ClosestNos(arr, n, n2);
						break;
			case 12:	cout<<"Enter the no. of iterations"<<" \n";
					    cin>>n2;
						reduce1eleAtEachStep(arr, n, n2);
						break;
			case 13:	cout<<"Enter the no. of elements"<<" \n";
					    cin>>n2;
						if(n2<n)
						{
							moveFirstXelementsToLast(arr, n, n2);
							cout<<"done \n";
						}
						else cout<<"Not done\n";
						break;
			case 14:	key = equiPoint(arr, n);
						if(key!=-1)
							cout<<"The key is"<<arr[key]<<" \n";
					    else
							cout<<"No such key"<<" \n";
					    break;		
			case 15:	cout<<"All posible sets are \n";
						allSetsPossible(arr, n);
						break;
			case 16:	cout<<"Enter the sum"<<" \n";
					    cin>>n2;					    
						cout<<"All posible sets are \n";
						allSetsPossibleWithSumK(arr, n, n2);
						break;	
			case 17:	key = longestContiIncSubarray(arr, n, &max);
						if(key!=-1)
							cout<<"The length is"<<key<<" \n";
					    else
							cout<<"No such sub array"<<" \n";
						break;
			case 18:	cout<<"Enter the element to search\n";
					    cin>>key;			
						vs = findBSTencoding(arr, n, key);
						for(int i=0;i<vs.size();i++)
            				cout<<vs[i]<<"-";
						break;
			case 19:	key = firstOccurrenceOf1InfiniteBool(arr, n);
						cout<<"The index of 1st 1 is : "<<key;
						break;
			case 30:	cout<<"END";
						break;
		}
					
	}while(choice!=30);
	
	
	//system("pause");
  return 0;
}

void sort(int arr[10], int n)
{
	int i,j;
	for(i=0; i<n; i++)
	{
		for(j=0; j<i; j++)
		{
			if(arr[i]<arr[j])
			{
				arr[i] = arr[j] - arr[i];
				arr[j] = arr[j] - arr[i];
				arr[i] = arr[j] + arr[i];
			}
		}
	}	
}

void sortDec(int arr[10], int n)
{
	int i,j;
	for(i=0; i<n; i++)
	{
		for(j=0; j<i; j++)
		{
			if(arr[i]>arr[j])
			{
				arr[i] = arr[j] - arr[i];
				arr[j] = arr[j] - arr[i];
				arr[i] = arr[j] + arr[i];
			}
		}
	}	
}

void PGT(int arr[10], int n)
{
	if(n<3) return;
	int i,j,k;
	for(i=0; i<n; i++)
	{
		arr[i]=arr[i]*arr[i];
	}
	sort(arr, n);
	for(i=2; i<n; i++)
	{
		j = 0; k = i-1;
		while(j<i && k>=0 && j<k)
		{
			if(arr[i]==arr[j]+arr[k])
			{
				cout<<"\n"<<arr[i]<<", "<<arr[j]<<", "<<arr[k]<<"\n";
				j++;
				k--;
			}
			else if(arr[i]<(arr[j]+arr[k]))
			{
				k--;
			}
			else
			{
				j++;
			}
		}
	}
}

int median(int ar1[], int ar2[], int n)
{
	int i = 0;  /* Current index of i/p array ar1[] */
    int j = 0; /* Current index of i/p array ar2[] */
    int count;
    int m1 = -1, m2 = -1;
 
    /* Since there are 2n elements, median will be average
     of elements at index n-1 and n in the array obtained after
     merging ar1 and ar2 */
    for (count = 0; count <= n; count++)
    {
        /*Below is to handle case where all elements of ar1[] are
          smaller than smallest(or first) element of ar2[]*/
        if (i == n)
        {
            m1 = m2;
            m2 = ar2[0];
            break;
        }
 
        /*Below is to handle case where all elements of ar2[] are
          smaller than smallest(or first) element of ar1[]*/
        else if (j == n)
        {
            m1 = m2;
            m2 = ar1[0];
            break;
        }
 
        if (ar1[i] < ar2[j])
        {
            m1 = m2;  /* Store the prev median */
            m2 = ar1[i];
            i++;
        }
        else
        {
            m1 = m2;  /* Store the prev median */
            m2 = ar2[j];
            j++;
        }
    }
 
    return (m1 + m2)/2;
}

int kadane(int arr[], int n)
{
	int i,j,locali,maxSum = 0, sum = 0;
	for(int k=0; k<n; k++)
	{
		if(sum<=0 && arr[k]<=0)
			continue;
		else if(sum<=0)
		{
			locali = k;
			sum=arr[k];
		}
		else
			sum+=arr[k];
		if(maxSum<sum)
		{
			i=locali;
			maxSum=sum;
			j=k;
		}	
		
	}
	return maxSum;
}

int cirKadane(int arr[], int n)
{
	int i,maxSum=0,wrapSum=0;
	maxSum=kadane(arr,n);
	for(int i=0; i<n; i++)
	{
		wrapSum+=arr[i];
		arr[i] = -arr[i];
	}
	wrapSum+=kadane(arr,n);
	return (maxSum>wrapSum? maxSum : wrapSum);
}

int* productForEveryElement(int arr[], int n)
{
	int i,t=1;
	int *ar2[10];
	ar2[0] = new int;
	*ar2[0] = 1;
	for(i = 1; i<n; i++)
	{
		ar2[i] = new int;
		t = t*arr[i-1];
		*ar2[i]=t;
	}
	t=arr[n-1];
	for(i=n-2; i>=0; i--)
	{
		*ar2[i]=(*ar2[i])*t;
		t=t*(arr[i]);
	}
	return *ar2;
}

void merge(int arr1[], int arr2[], int n1, int n2)
{
	if(!(n1+n2 <= 10))
	{
		cout<<"Can't be merged\n";
		return;
	}	
	else
	{
		cout<<"The merged array is : ";
		int j,k;
		for(int i = 0; i<n1+n2; i++)
		{
			if(arr1[j] < arr2[k] || k==n2)
			{
				cout<<arr1[j];
				j++;
			}
			else if(arr1[j] >= arr2[k] || j==n1) 
			{
				cout<<arr2[k];
				k++;
			}					
		}
	}
}

int findMaxDivisibleNo(int arr[], int n, int n2)
{
	int county0=0,sum=0, rem=0, ar[2];
	int count=0, s=0, t=0;	
	for(int i=0; i<n; i++)
	{
		if(arr[i]==0)
		{
			county0 += 1;
		}	
		sum+= arr[i];
	}
	cout<<county0;
	if(county0 == 0) return -1;	
	sortDec(arr, n);
	for(int i=0, j = 0; i<(n-county0) ;i++)
		{
			t = pow(10,(n-j-county0-1));
			s += t*arr[i];
			j++;
		}
	t=pow(10,(county0));
	s = s*t;
		
	county0;	
	if(sum%3 == 0) return s;
	else 
	{
		s = 0;
		rem = sum%3;
		if(rem == 1)
		{
			for(int i = (n-county0-1); i>=0; i--)
			{
				if(arr[i] == 1)	
				{
					ar[0] = 1;
					ar[1] = 0;
					break;
				}
				else if(arr[i] == 2)
				{
					if(ar[0] == 2)ar[1] = 2;
					else ar[0] = 2;
				}
				else if(arr[i] == 4)
				{
					ar[0] = 4;
					ar[1] = 0;
					break;
				}
				else if(arr[i] == 5)
				{
					if(ar[0]==2 && ar[1] != 2) ar[1] = 5;
				}
				else if(arr[i] == 7)
				{
					ar[0] = 7;
					ar[1] = 0;
					break;	
				}
			}	
		}
		else
		{
			for(int i = (n-county0-1); i>=0; i--)
			{
				if(arr[i] == 1)	
				{
					if(ar[0] == 1)ar[1] = 1;
					else ar[0] = 1;
				}
				else if(arr[i] == 2)
				{
					ar[0] = 2;
					ar[1] = 0;
					break;
				}
				else if(arr[i] == 4)
				{
					if(ar[0]==1 && ar[1] != 1) ar[1] = 4;
					else if(ar[0]!=4) ar[0] = 4;
					else ar[1] = 4;
				}
				else if(arr[i] == 5)
				{
					ar[0] = 5;
					ar[1] = 0;
					break;
				}
				else if(arr[i] == 7)
				{
					if(ar[0]==1 && (ar[1] != 1 || ar[1] != 4)) ar[1] = 7;
				}
				else if(arr[i] == 8)
				{
					ar[0] = 8;
					ar[1] = 0;
					break;
				}				
			}
		}
		if(ar[0] == 0 && ar[1] == 0) return -1;
		else if(ar[0] == 0 || ar[1] == 0) count = 1;
		else count = 2;
		for(int i=0, j = 0; i<(n-county0) ;i++)
		{
			if(arr[i]==ar[0])
			{
				arr[i] == 0;
				ar[0] = 0;
			}
			else if(arr[i]==ar[1])
			{
				arr[i] == 0;
				ar[1] = 0;
			}		
			else
			{
				t = pow(10,(n-count-county0-j-1));
				s += t*arr[i];
				j++;
			}
		}
	}
	t=pow(10,(county0));
	s = s*t;
	return s;	
}

void find2ClosestNos(int arr[], int n, int n2)
{
	int i=0,j=0,k=n-1,maxClosestSum=0, sum=0;
	int arr1[10], arr2[10];
	sort(arr, n);
	while(j<k)
	{
		sum = arr[j]+arr[k];
			if(abs(maxClosestSum-n2) == abs(sum-n2) && maxClosestSum!=0)
			{
				arr1[i]=arr[j];arr2[i]=arr[k];
				i++;
			}
			else if(abs(maxClosestSum-n2) > abs(sum-n2))
			{
				maxClosestSum = sum;
				i=0;
				arr1[i]=arr[j];arr2[i]=arr[k];
				i++;								
			}
			if(sum>n2)			
				k--;
			else j++;				
	}	
	if(i==0){
		cout<<"not found anything";	
		return;
	} 
	cout<<"the pairs closest to "<<n2<<" are :";
	for(int l=0;l<i;l++)
	{
		cout<<arr1[l]<<"-"<<arr2[l]<<"  ";
	}
	return;
}

void reduce1eleAtEachStep(int arr[], int n, int n2)
{
	int sum;
	for(int i=0;i<n2;i++)
	{
		for(int j=0;j<(n-i);j++)
		{
			arr[j]=arr[j+1]-arr[j];
		}
		arr[n-1-i]=NULL;
	}
	for(int j=0;j<(n-n2);j++)
	{
		sum += arr[j];
	}
	cout<<"The sum is : "<<sum<<"\n";
}

void moveFirstXelementsToLast(int arr[], int n, int n2)
{
	for(int i=0;i<n2;i++)
	{
		arr[n+i]=arr[i];
	}
	for(int j=n2;j<(n+n2);j++)
	{
		arr[j-n2]=arr[j];
	}
	for(int j=n;j<(n+n2);j++)
	{
		arr[j]=NULL;
	}
}

int equiPoint(int arr[], int n)
{
	float sum, sumL;
	for(int i=0;i<n;i++)
	{
		sum += arr[i];
	}
	for(int i=0;i<n;i++)
	{
		if(sumL == (sum-arr[i])/2)
			return i;
		else
			sumL += arr[i];
	}
	return -1;
}

void allSetsPossible(int arr[], int n)
{
	std::map <pair<int,int>,int>::iterator it;
	std::map <pair<int,int>,int> m;
	std::pair<int,int> p1,p2;
	int i1, j1;
	for(int i=0;i<n;i++)
	{
		for(int j=i+1;j<n;j++)
		{
			p1 = make_pair(arr[i], arr[j]);
			p2 = make_pair(arr[j], arr[i]);
			i1 = m.find(p1) == m.end();
			j1 = m.find(p2) == m.end();
			 
			if(i1 && j1)
		 		m.insert(std::make_pair(p1,1));
		}
    }
	for(it=m.begin();it!=m.end();it++)
	{
		
		cout<<((*it).first).first<<"-"<<(*it).first.second<<" ";
	}
}

void allSetsPossibleWithSumK(int arr[], int n, int n2)
{
	std::map <pair<int,int>,int>::iterator it;
	std::map <pair<int,int>,int> m;
	std::pair<int,int> p1,p2;
	int i1, j1;
	for(int i=0;i<n;i++)
	{
		for(int j=i+1;j<n;j++)
		{
			p1 = make_pair(arr[i], arr[j]);
			p2 = make_pair(arr[j], arr[i]);
			i1 = m.find(p1) == m.end();
			j1 = m.find(p2) == m.end();
			 
			if(i1 && j1 && arr[i]+arr[j] == n2)
		 		m.insert(std::make_pair(p1,1));
		}
    }
	for(it=m.begin();it!=m.end();it++)
	{
		
		cout<<((*it).first).first<<"-"<<(*it).first.second<<" ";
	}
}

int longestContiIncSubarray(int arr[], int n, int *max_ref)
{
	/* Base case */
    if(n == 1)
        return 1;
        
    int res, max_ending_here = 1; // length of LIS ending with arr[n-1]
 
    /* Recursively get all LIS ending with arr[0], arr[1] ... ar[n-2]. If 
       arr[i-1] is smaller than arr[n-1], and max ending with arr[n-1] needs
       to be updated, then update it */
    for(int i = 1; i < n; i++)
    {
        res = longestContiIncSubarray(arr, i, max_ref);
        if (arr[i-1] < arr[n-1] && res + 1 > max_ending_here)
            max_ending_here = res + 1;
    }
 
    // Compare max_ending_here with the overall max. And update the
    // overall max if needed
    if (*max_ref < max_ending_here)
       *max_ref = max_ending_here;
 
    // Return length of LIS ending with arr[n-1]
    return max_ending_here;
}

//The function longestContiIncSubarray can also be written as :
int lis( int arr[], int n )
{
   int *lis, i, j, max = 0;
   lis = (int*) malloc ( sizeof( int ) * n );
 
   /* Initialize LIS values for all indexes */
   for ( i = 0; i < n; i++ )
      lis[i] = 1;
    
   /* Compute optimized LIS values in bottom up manner */
   for ( i = 1; i < n; i++ )
      for ( j = 0; j < i; j++ )
         if ( arr[i] > arr[j] && lis[i] < lis[j] + 1)
            lis[i] = lis[j] + 1;
    
   /* Pick maximum of all LIS values */
   for ( i = 0; i < n; i++ )
      if ( max < lis[i] )
         max = lis[i];
 
   /* Free memory to avoid memory leak */
   free( lis );
 
   return max;
}

vector<bool> findBSTencoding(int arr[], int n, int x)
{
	vector<bool> v;
	if(arr[0]==x)
		return v;	
	
	bool left, right;
	int min = 0, max = INT_MAX;
	if(arr[0]<x)
	{
		min = arr[0];
		right = true;
	}
	else
	{
		max = arr[0];
		left = true;
	}
	int parent = arr[0], curr, grandparent;
	for(int i=1; i<n; i++)
	{
		curr = arr[i];
		if(left && curr>=min && curr<=max)
		{
			v.push_back(0);
			if(curr == x)
				return v;
			else if(curr<x)
			{
				left = false;
				right = true;
				min = curr;
			}
			else if(curr>x)
			{
				left = true;
				right = false;
				max = curr;
			}	
			
		}
		else if(right && curr>=min && curr<=max)
		{
			v.push_back(1);
			if(curr == x)
				return v;
			else if(curr<x)
			{
				left = false;
				right = true;
				min = curr;
			}
			if(curr>x)
			{
				left = true;
				right = false;
				max = curr;
			}	
		}
	}
	v.clear();
	return v;
}

int firstOccurrenceOf1InfiniteBool(int arr[], int n)
{
	int x=0,min,max;
	while(min>=max && pow(2,x)<=n)
	{
		int t = pow(2,x);
		if(arr[t] == 0)
			min = x;
		if(arr[t] == 1)
			max = x;
		x++;
	}
	if(min>=max)
		return -1;
	for(int i=(pow(2,min)); i<=(pow(2,max)); i++)
	{
		if(arr[i] == 1)
			return i;
	}
}
