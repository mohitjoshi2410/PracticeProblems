#include<iostream>
#include<Queue>
#include<map>
#include<list>
#include<climits>
#include<vector>
#include<stdlib.h>
//#include "MinHeap.cpp"
using namespace std;

list<int>::iterator itr;

struct Edge
{
    int src, dest, wt;
};

//used for Kruskal's algorithm and Union Find algorithm
struct subset
{
    int parent;
    int rank;
};



class Graph
{
    int V;    // No. of vertices
    int E;
    list<int> *adj;    // Pointer to an array containing adjacency lists
    Edge *edge;
    int adm[10][10];
public:
    Graph(int V = 10);  // Constructor
    void setV(int V);
    void addEdge(int v, int w, int wt=1); // function to add an edge to graph
    void display();
    void BFS(int s);  // prints BFS traversal from a given source s
    void DFS(int s); 
    void DFSUtil(int v, bool visited[]);
    bool isBipartite(int s);
    void DijstraShortestPath(int s, int d);
    bool hasCycle();
    void bridge();
    	void bridgeUtil(int u, bool visited[], int disc[], int low[], int parent[]);
    void AP();
    	void APUtil(int u, bool visited[], int disc[], int low[], int parent[], bool ap[]);
	bool isBC();
		bool isBCUtil(int u, bool visited[], int disc[],int low[],int parent[]);
	bool isCycle();
	void kruskal();
	void PrimMST();
};

int main()
{
    int choice;
    long digit;
    int element,k, l, v, wt, min, max, d;
    int maxSum =0;
    bool check;
    vector<int> vl;
    
    Graph G;
    
    do
    {
        cout << endl << "Enter 1: Create a graph";
        cout << endl << "Enter 2: Create a weighted graph";
        cout << endl << "Enter 3: Display adjacency list of a graph";
        cout << endl << "Enter 4: BFS of a graph";
        cout << endl << "Enter 5: DFS of a graph";
        cout << endl << "Enter 6: Graph is bipartite or not";
        cout << endl << "Enter 7: Dijstra's shortest distances & path";
        cout << endl << "Enter 8: Graph has a cycle or not";
        cout << endl << "Enter 9: Graph has bridges or not";
        cout << endl << "Enter 10: Graph has articulation points or not";
        cout << endl << "Enter 11: Graph is biconnected or not";
        cout << endl << "Enter 12: Graph has a cycle or not(Union Find)";
        cout << endl << "Enter 13: Kruskal's algo to find MST";
        cout << endl << "Enter 14: Prim's algo to find MST";
        cout << endl << "Enter 15: Graph is biconnected or not";
        
		cout << endl << "Enter 30: Exit\n";
        cout << endl << "Enter your choice ";

        cin>>choice;
        switch(choice)
        {
           case 1: cout << "Enter number of vertices" << endl;
    			   cin>>v;
    			   G.setV(v);
		   		   cout << "Enter edge: To quit enter 0" << endl;
                   cin>>k;
				   if(k != 0)
				   {
					   cin>>l;
	                   while(k!=0)
	                   {
	                   		cout<<k<<l<<endl;
	                      	G.addEdge(k,l);
	                      	cin>>k;
							if(k !=0 ) cin>>l;                      
	                   };
	           	   }
                   break;
           case 2: cout << "Enter number of vertices" << endl;
    			   cin>>v;
    			   G.setV(v);
		   		   cout << "Enter edge with weight: To quit enter 0" << endl;
                   cin>>k;
                   if(k != 0)
                   {
					   cin>>l>>wt;
	                   while(k!=0)
	                   {
	                   		cout<<k<<l<<wt<<endl;
	                      	G.addEdge(k,l,wt);
	                      	cin>>k;
							if(k != 0) cin>>l>>wt;                      
	                   };
               	   }
                   break;
		   case 3: cout << "The adjacency list is : ";
                   G.display();
                   break;
           case 4: cout << "Enter the node to start" << endl;
                   cin>>element;
                   cout << "BFS of the graph is : ";
                   G.BFS(element);
                   break;
           case 5: cout << "Enter the node to start" << endl;
                   cin>>element;
                   cout << "DFS of the graph is : ";
                   G.DFS(element);
                   break; 
           case 6: cout << "Enter the node to start" << endl;
                   cin>>element;
                   check = G.isBipartite(element);
                   if(check)
                   		cout<<"Graph is Bipartite!!!";
                   else
                   		cout<<"Graph is not Bipartite!!!";
                   break;
           case 7: cout << "Enter the source & destination to calculate shortest paths" << endl;
                   cin>>element>>d;
                   cout << "The shortest paths are" << endl;
				   G.DijstraShortestPath(element, d);
				   break;
		   case 8: check = G.hasCycle();
		   		   if(check)
                   		cout<<"Graph has a cycle!!!";
                   else
                   		cout<<"Graph does not have a cycle!!!";
                   break;
           case 9: G.bridge();
           		   break;
           case 10: G.AP();
           		   break;
		   case 11: check = G.isBC();
		   		   if(check)
                   		cout<<"Graph is biconnected!!!";
                   else
                   		cout<<"Graph is not biconnected!!!";
           		   break;
           case 12: check = G.isCycle();
           			if(check)
                   		cout<<"Graph has a cycle!!!";
                   else
                   		cout<<"Graph does not have a cycle!!!";
                   break;
           case 13: G.kruskal();
           			break;
           case 14: G.PrimMST();
           			break;
		   case 29: cout << "Enter element which do you want delete from  the BST" << endl;
                   cin>>digit;
//                   G.deletenode(digit,tree);
                   break;

           case 30: cout << "\nEND\n";
                   break;
        };
  }while(choice!=30);
  //system("pause");
  return 0;
}

Graph::Graph(int V)
{
    this->V = V;
    adj = new list<int>[V+1];
    int adm[V][V];
    edge = new Edge[20];
}
 
void Graph::setV(int V)
{
    this->V = V;
}
 
void Graph::addEdge(int v, int w, int wt)
{
  adj[v].push_back(w); // Add w to vâ€™s list.
  adj[w].push_back(v);
  adm[v-1][w-1] = wt;
	adm[w-1][v-1] = wt;

	edge[E].src = v;
	edge[E].dest = w;
	edge[E].wt = wt;
	E = E+1;
}

void Graph::display()
{
	for(int i = 1; i<= V; i++)	
	{
		cout<<"\n"<<i<<"-->";
		for(itr = adj[i].begin(); itr != adj[i].end(); itr++)	
		{
			cout<<(*itr)<<" ";
		}	
	}
	return;
}

void Graph::BFS(int s)
{
    bool *visited = new bool[V+1];
    for(int i = 1; i <= V; i++)
        visited[i] = false;
 
    list<int> queue;
 
    visited[s] = true;
    queue.push_back(s);
 
    while(!queue.empty())
    {
        s = queue.front();
        cout << s << " ";
        queue.pop_front();
 
        for(itr = adj[s].begin(); itr != adj[s].end(); itr++)
        {
            if(!visited[*itr])
            {
                visited[*itr] = true;
                queue.push_back(*itr);
            }
        }
    }
}

void Graph::DFSUtil(int v, bool visited[])
{
    visited[v] = true;
    cout << v << " ";
    
    list<int>::iterator itr;
    for(itr = adj[v].begin(); itr != adj[v].end(); itr++)
        {
        	if(visited[*itr] == false)
            	DFSUtil(*itr, visited);
        }
}
void Graph::DFS(int v)
{
    bool *visited = new bool[V+1];
    for(int i = 0; i <= V; i++)
        visited[i] = false;
 
 	DFSUtil(v, visited);
 	
	//if graph is a forest 
	for(int i = 1; i < V; i++)
        if(visited[i] == false)
            DFSUtil(i, visited);
}

bool Graph::isBipartite(int s)
{
    // Mark all the vertices as not visited
    int *visited = new int[V+1];
    for(int i = 1; i <= V; i++)
        visited[i] = -1;
 
    list<int> queue;
 
    visited[s] = 1;
    queue.push_back(s);
 
    while(!queue.empty())
    {
        s = queue.front();
        cout << s << " ";
        queue.pop_front();
 
        for(itr = adj[s].begin(); itr != adj[s].end(); itr++)
        {
            if(visited[*itr]==-1)
            {
                visited[*itr] = 1 - visited[s];
                queue.push_back(*itr);
            }
            else if(visited[*itr] == visited[s])
            	return false;
        }
    }
    return true;
}

int minDistance(int dist[], bool visited[], int V)
{
   // Initialize min value
   int min = INT_MAX, min_index;
 
   for (int v = 1; v <= V; v++)
     if (visited[v] == false && dist[v] <= min)
         min = dist[v], min_index = v;
 
   return min_index;
}

void Graph::DijstraShortestPath(int src, int d)
{
    bool *visited = new bool[V+1];
    int *dist = new int[V+1];
    int *parent = new int[V+1];
    for(int i = 1; i <= V; i++)
    {
    	visited[i] = false;
    	dist[i] = INT_MAX;
    }
 	  dist[0] = INT_MAX;
  
    list<int> queue;
   	int s = src;

    visited[s] = true;
    queue.push_back(s);
    dist[s] = 0;
    while(!queue.empty())
    {
        s = queue.front();
        cout <<endl<< s << " " << dist[s];
        queue.pop_front();
     		visited[s] = true;

        for(itr = adj[s].begin(); itr != adj[s].end(); itr++)
        {
        	int m = *itr;
            if(!visited[m])
            {
                //visited[*itr] = true;
                //queue.push_back(*itr);
                if (dist[m] > dist[s]+adm[s-1][m-1])
                {
                	parent[m] = s;
                	dist[m] = dist[s]+adm[s-1][m-1];
                }
            }
        }
        int minDist = minDistance(dist,visited, V);
        if(minDist!=0)
			queue.push_back(minDist);
    }
    
    //print reverse path
    cout<<endl<<d<<"-";
    while(d != src)
    {
    	cout<<parent[d]<<"-";
    	d = parent[d];
    }
    return;
}

bool Graph::hasCycle()
{
    bool *visited = new bool[V+1];
    int *parent = new int[V+1];
    for(int i = 1; i <= V; i++)
    	visited[i] = false;
  	int s = 1;
    	
    list<int> queue;
 
    visited[s] = true;
    queue.push_back(s);
 
    while(!queue.empty())
    {
        // Dequeue a vertex from queue and print it
        s = queue.front();
        cout << s << " ";
        queue.pop_front();
 
        for(itr = adj[s].begin(); itr != adj[s].end(); itr++)
        {
            if(!visited[*itr])
            {
            	parent[*itr] = s;
                visited[*itr] = true;
                queue.push_back(*itr);
            }
            else if(*itr != parent[s])
            	return true;
        }
    }
    return false;
}

void Graph::bridgeUtil(int u, bool visited[], int disc[], 
                                       int low[], int parent[])
{
    static int time = 0;
 
    visited[u] = true;
    disc[u] = low[u] = ++time;
 
    list<int>::iterator i;
    for (i = adj[u].begin(); i != adj[u].end(); ++i)
    {
        int v = *i;  
        
        if (!visited[v])
        {
            parent[v] = u;
            bridgeUtil(v, visited, disc, low, parent);
 
            low[u]  = min(low[u], low[v]);
 
            // if the lowest vertex reachable from subtree under v is below u in DFS tree, then u-v is a bridge
            if (low[v] > disc[u])
              cout << u <<" " << v << endl;
        }
 
        else if (v != parent[u])
            low[u]  = min(low[u], disc[v]);
    }
}
 
// DFS based function to find all bridges.
void Graph::bridge()
{
    bool *visited = new bool[V+1];
    int *disc = new int[V+1];
    int *low = new int[V+1];
    int *parent = new int[V+1];
 
    for (int i = 1; i <= V; i++)
    {
        visited[i] = false;
    }
 
    for (int i = 1; i <= V; i++)
        if (visited[i] == false)
            bridgeUtil(i, visited, disc, low, parent);
}

void Graph::APUtil(int u, bool visited[], int disc[], 
                                      int low[], int parent[], bool ap[])
{
    static int time = 0;
    int children = 0;
 
    visited[u] = true;
    disc[u] = low[u] = ++time;
 
    list<int>::iterator i;
    for (i = adj[u].begin(); i != adj[u].end(); ++i)
    {
        int v = *i;  // v is current adjacent of u
 
        if (!visited[v])
        {
            children++;
            parent[v] = u;
            APUtil(v, visited, disc, low, parent, ap);
 
            low[u]  = min(low[u], low[v]);
 
            // u is an articulation point in following cases
 
            // (1) u is root of DFS tree and has two or more chilren.
            if (parent[u] == 0 && children > 1)
               ap[u] = true;
 
            // (2) If u is not root and low value of one of its child is more
            // than discovery value of u.
            if (parent[u] != 0 && low[v] >= disc[u])
               ap[u] = true;
        }
 
        // update low value of u for parent function calls.
        else if (v != parent[u])
            low[u]  = min(low[u], disc[v]);
    }
}
 
// function to do DFS traversal.
void Graph::AP()
{
    bool *visited = new bool[V+1];
    int *disc = new int[V+1];
    int *low = new int[V+1];
    int *parent = new int[V+1];
    bool *ap = new bool[V+1]; // To store articulation points
 
    for (int i = 1; i <= V; i++)
    {
        visited[i] = false;
        ap[i] = false;
    }
 
    for (int i = 1; i <= V; i++)
        if (visited[i] == false)
            APUtil(i, visited, disc, low, parent, ap);
 
    for (int i = 1; i <= V; i++)
        if (ap[i] == true)
            cout << i << " ";
}

bool Graph::isBCUtil(int u, bool visited[], int disc[],int low[],int parent[])
{
    static int time = 0;
    int children = 0;

    visited[u] = true;
    disc[u] = low[u] = ++time;
 
    list<int>::iterator i;
    for (i = adj[u].begin(); i != adj[u].end(); ++i)
    {
        int v = *i;  // v is current adjacent of u
 
        if (!visited[v])
        {
            children++;
            parent[v] = u;
 
            // check if subgraph rooted with v has an articulation point
            if (isBCUtil(v, visited, disc, low, parent))
               return true;
 
            // Check if the subtree rooted with v has a connection to one of the ancestors of u
            low[u]  = min(low[u], low[v]);
 
            // u is an articulation point in following cases
            
            // 1. u is root of DFS tree and has two or more chilren.
            if (parent[u] == 0 && children > 1)
               return true;
 
            // 2. If u is not root and low value of one of its child is more than discovery value of u.
            if (parent[u] != 0 && low[v] >= disc[u])
               return true;
        }
 
        // update low value of u for parent function calls.
        else if (v != parent[u])
            low[u]  = min(low[u], disc[v]);
    }
    return false;
}

// function that returns true if graph is Biconnected, otherwise false. DFS used.
bool Graph::isBC()
{
    bool *visited = new bool[V+1];
    int *disc = new int[V+1];
    int *low = new int[V+1];
    int *parent = new int[V+1];
 
    for (int i = 1; i <= V; i++)
    {
        parent[i] = 0;
        visited[i] = false;
    }
 
    if (isBCUtil(1, visited, disc, low, parent) == true)
        return false;
 
    // check whether the given graph is connected or not.
    for (int i = 1; i <= V; i++)
        if (visited[i] == false)
            return false;
 
    return true;
}


int find(subset subsets[], int i)
{
	// find root and make root as parent of i (path compression)
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);
        
    return subsets[i].parent;
}
 
void Union(subset subsets[], int x, int y)
{
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);
 
    // attach smaller rank tree under root of high rank tree (Union by Rank)
    if (subsets[xroot].rank < subsets[yroot].rank)
        subsets[xroot].parent = yroot;
    else if (subsets[xroot].rank > subsets[yroot].rank)
        subsets[yroot].parent = xroot;
 
    else
    {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}

// function to check whether a given graph contains cycle or not
bool Graph::isCycle()
{
    subset *subsets = new subset[V+1];
 
    for (int i = 1; i <= V; i++)
    {
    	subsets[i].parent = i;
    	subsets[i].rank = 0;
    }
 
   /* iterate through all edges of graph, find subset of both
     vertices of every edge, if both subsets are same, then there is
     cycle in graph */
    for(int i = 0; i < E; i++)
    {
        int x = find(subsets, edge[i].src);
        int y = find(subsets, edge[i].dest);
 
        if (x == y)
            return true;
 
        Union(subsets, x, y);
    }
    return false;
}

int myComp(const void* a, const void* b)
{
    Edge* a1 = (Edge*)a;
    Edge* b1 = (Edge*)b;
    return a1->wt > b1->wt;
}

void Graph::kruskal()
{
    qsort(edge, E, sizeof(edge[0]), myComp);
	
	int e=0, i=0;
	Edge result[V];
    subset *subsets = new subset[V+1];
    for (int m = 0; m <= V; m++)
    {
    	subsets[m].parent = m;
    	subsets[m].rank = 0;
    }
 
    while(e < V - 1)
    {
    	Edge next_edge = edge[i++];
    	
        int x = find(subsets, next_edge.src);
        int y = find(subsets, next_edge.dest);
 
        if (x != y)
        {
        	result[e++] = next_edge;    
        	Union(subsets, x, y);
        }
    }
	
    cout<<"Following are the edges in the constructed MST\n";
    for (i = 0; i < e; ++i)
        cout<<result[i].src<<" -- "<<result[i].dest<<" == "<<result[i].wt<<"\n";
    return;
}






#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <iostream>
struct MinHeapNode
{
    int  v;
    int key;
};
 
struct MinHeap
{
    int size;      // number of heap nodes present currently
    int capacity;  // capacity of min heap
    int *pos;      // needed for decreaseKey()
    MinHeapNode **array;
};
 
MinHeapNode* newMinHeapNode(int v, int key)
{
    MinHeapNode* minHeapNode = new MinHeapNode;
    minHeapNode->v = v;
    minHeapNode->key = key;
    return minHeapNode;
}
 
MinHeap* createMinHeap(int capacity)
{
    MinHeap* minHeap = new MinHeap;
    minHeap->pos = new int;
    minHeap->size = 0;
    minHeap->capacity = capacity;
    minHeap->array = new MinHeapNode*;
    return minHeap;
}

void swapMinHeapNode(MinHeapNode** a, MinHeapNode** b)
{
    MinHeapNode* t = *a;
    *a = *b;
    *b = t;
}
 
void minHeapify(MinHeap* minHeap, int idx)
{
    int smallest, left, right;
    smallest = idx;
    left = 2 * idx + 1;
    right = 2 * idx + 2;

    if (left < minHeap->size && minHeap->array[left]->key < minHeap->array[smallest]->key )
      smallest = left;

    if (right < minHeap->size && minHeap->array[right]->key < minHeap->array[smallest]->key )
      smallest = right;

    if (smallest != idx)
    {
        // The nodes to be swapped in min heap
        MinHeapNode *smallestNode = minHeap->array[smallest];
        MinHeapNode *idxNode = minHeap->array[idx];
 
        minHeap->pos[smallestNode->v] = idx;
        minHeap->pos[idxNode->v] = smallest;
        // Swap nodes
        swapMinHeapNode(&minHeap->array[smallest], &minHeap->array[idx]);
        minHeapify(minHeap, smallest);
    }
    return;
}
 
int isEmpty(MinHeap* minHeap)
{
    return minHeap->size == 0;
}
 
// extract minimum node from heap
MinHeapNode* extractMin(MinHeap* minHeap)
{
    if (isEmpty(minHeap))
        return NULL;

    MinHeapNode* root = minHeap->array[0];


    MinHeapNode* lastNode = minHeap->array[minHeap->size - 1];

    minHeap->array[0] = lastNode;
    
    minHeap->pos[root->v] = minHeap->size-1;
    minHeap->pos[lastNode->v] = 0;
    
    --minHeap->size;
    minHeapify(minHeap, 0);
    return root;
}
 
// pos[] of min heap is used to get the current index of node in min heap
void decreaseKey(MinHeap* minHeap, int v, int key)
{
    int i = minHeap->pos[v];
 
    minHeap->array[i]->key = key;
 
    // This is a O(Logn) loop
    while (i && minHeap->array[i]->key < minHeap->array[(i - 1) / 2]->key)
    {
        // Swap this node with its parent
        minHeap->pos[minHeap->array[i]->v] = (i-1)/2;
        minHeap->pos[minHeap->array[(i-1)/2]->v] = i;
        swapMinHeapNode(&minHeap->array[i],  &minHeap->array[(i - 1) / 2]);
 
        // move to parent index
        i = (i - 1) / 2;
    }
}
 
bool isInMinHeap(MinHeap *minHeap, int v)
{
   if (minHeap->pos[v] < minHeap->size)
     return true;
   return false;
}





// function used to print the constructed MST
void printArr(int arr[], int n)
{
    for (int i = 2; i <= n; ++i)
        cout<<"\n"<<i<<"--"<<arr[i];
}
 
// The main function that constructs Minimum Spanning Tree (MST) using Prim's algorithm
void Graph::PrimMST()
{
    int parent[V+1];   // Array to store constructed MST
    int key[V];      // Key values used to pick minimum weight edge in cut
 
    MinHeap* minHeap = createMinHeap(V);

    minHeap->size = V;

    for (int x = 1; x < V; ++x)
    {
        parent[x+1] = -1;
        key[x] = INT_MAX;
        minHeap->array[x] = newMinHeapNode(x, key[x]);
        minHeap->pos[x] = x;
        
        minHeap->array[1] = newMinHeapNode(1, key[1]);
        minHeap->pos[1] = 1;
    }
    // make key value of 0th vertex as 0 so that it is extracted first
    key[0] = 0;
    minHeap->array[0] = newMinHeapNode(0, key[0]);
    minHeap->pos[0] = 0;
 	
    // collect all nodes not yet added to MST.
    while (!isEmpty(minHeap))
    {
    	cout<<"\n here\n";
        
      MinHeapNode* minHeapNode = extractMin(minHeap);
		  int u = minHeapNode->v; // Store the extracted vertex number
 		  cout<<"\n"<<u<<"\n";
        
      list<int>::iterator i;
    	for (i = adj[u+1].begin(); i != adj[u+1].end(); i++)
        {
        	int v = *i;
 			    cout<<u+1<<"=="<<v;
 			
            if (isInMinHeap(minHeap, v-1) && adm[u][v-1] < key[v-1])
            {
            	key[v-1] = adm[u][v-1];
                parent[v] = u+1;
                decreaseKey(minHeap, v-1, key[v-1]);
            }
        }
    }
 
    // print edges of MST
    printArr(parent, V);
}
